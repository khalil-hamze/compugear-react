{"version":3,"sources":["logo.svg","components/Navbar/Navbar.js","components/Jumbotron/Jumbotron.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Navbar","id","class","href","src","type","data-toggle","data-target","particleOpt","particles","number","value","density","enable","value_area","color","shape","stroke","width","polygon","nb_sides","image","height","opacity","random","anim","speed","opacity_min","sync","size","size_min","line_linked","distance","move","direction","straight","out_mode","bounce","attract","rotateX","rotateY","interactivity","detect_on","events","onhover","mode","onclick","resize","modes","grab","bubble","duration","repulse","push","particles_nb","remove","retina_detect","Jumbotron","params","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"kKAAAA,EAAOC,QAAU,IAA0B,kC,4JC0C5BC,MAvCf,WACE,OACE,6BAASC,GAAG,WACV,yBAAKC,MAAM,4DACT,uBAAGA,MAAM,eAAeC,KAAK,KAC1B,yBAAKC,IAAI,+BAEZ,4BACEF,MAAM,iBACNG,KAAK,SACLC,cAAY,WACZC,cAAY,qBAEZ,0BAAML,MAAM,yBAGd,yBAAKA,MAAM,2BAA2BD,GAAG,oBACvC,wBAAIC,MAAM,sBACR,wBAAIA,MAAM,YACR,uBAAGA,MAAM,WAAWC,KAAK,YAAzB,YAEF,wBAAID,MAAM,YACR,uBAAGA,MAAM,WAAWC,KAAK,uBAAzB,uBAIF,wBAAID,MAAM,YACR,uBAAGA,MAAM,WAAWC,KAAK,iBAAzB,cAEF,wBAAID,MAAM,YACR,uBAAGA,MAAM,WAAWC,KAAK,YAAzB,iB,wBC7BRK,EAAc,CAClBC,UAAW,CACTC,OAAQ,CACNC,MAAO,GACPC,QAAS,CACPC,QAAQ,EACRC,WAAY,MAGhBC,MAAO,CACLJ,MAAO,WAETK,MAAO,CACLX,KAAM,SACNY,OAAQ,CACNC,MAAO,EACPH,MAAO,WAETI,QAAS,CACPC,SAAU,GAEZC,MAAO,CACLjB,IAAK,iBACLc,MAAO,IACPI,OAAQ,MAGZC,QAAS,CACPZ,MAAO,GACPa,QAAQ,EACRC,KAAM,CACJZ,QAAQ,EACRa,MAAO,EACPC,YAAa,GACbC,MAAM,IAGVC,KAAM,CACJlB,MAAO,EACPa,QAAQ,EACRC,KAAM,CACJZ,QAAQ,EACRa,MAAO,GACPI,SAAU,GACVF,MAAM,IAGVG,YAAa,CACXlB,QAAQ,EACRmB,SAAU,IACVjB,MAAO,UACPQ,QAAS,GACTL,MAAO,GAETe,KAAM,CACJpB,QAAQ,EACRa,MAAO,EACPQ,UAAW,OACXV,QAAQ,EACRW,UAAU,EACVC,SAAU,MACVC,QAAQ,EACRC,QAAS,CACPzB,QAAQ,EACR0B,QAAS,IACTC,QAAS,QAIfC,cAAe,CACbC,UAAW,SACXC,OAAQ,CACNC,QAAS,CACP/B,QAAQ,EACRgC,KAAM,WAERC,QAAS,CACPjC,QAAQ,EACRgC,KAAM,QAERE,QAAQ,GAEVC,MAAO,CACLC,KAAM,CACJjB,SAAU,IACVD,YAAa,CACXR,QAAS,IAGb2B,OAAQ,CACNlB,SAAU,IACVH,KAAM,GACNsB,SAAU,EACV5B,QAAS,EACTG,MAAO,GAET0B,QAAS,CACPpB,SAAU,IACVmB,SAAU,IAEZE,KAAM,CACJC,aAAc,GAEhBC,OAAQ,CACND,aAAc,KAIpBE,eAAe,GA2BFC,MAxBf,WACE,OACE,6BAASxD,GAAG,QACV,yBAAKC,MAAM,WACT,yBAAKA,MAAM,aACT,yBAAKD,GAAG,gBACN,kBAAC,IAAD,CAAWyD,OAAQlD,EAAac,OAAO,WAEzC,yBAAKpB,MAAM,uBACT,sDACA,qDACA,uBAAGA,MAAM,+BAA+BC,KAAK,KAA7C,cAGA,uBAAGD,MAAM,+BAA+BC,KAAK,KAA7C,iBCjHGwD,MATf,WACE,OACE,6BACE,kBAAC,EAAD,MACA,kBAAC,EAAD,QCCcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.56e9d83c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.25bf045c.svg\";","import React from \"react\";\r\nimport './Navbar.css';\r\n\r\nfunction Navbar() {\r\n  return (\r\n    <section id=\"nav-bar\">\r\n      <nav class=\"navbar navbar-expand-md navbar-light bg-light sticky-top\">\r\n        <a class=\"navbar-brand\" href=\"#\"\r\n          ><img src=\"images/logo-compugear.png\"\r\n        /></a>\r\n        <button\r\n          class=\"navbar-toggler\"\r\n          type=\"button\"\r\n          data-toggle=\"collapse\"\r\n          data-target=\"#navbarResponsive\"\r\n        >\r\n          <span class=\"navbar-toggler-icon\"></span>\r\n        </button>\r\n\r\n        <div class=\"collapse navbar-collapse\" id=\"navbarResponsive\">\r\n          <ul class=\"navbar-nav ml-auto\">\r\n            <li class=\"nav-item\">\r\n              <a class=\"nav-link\" href=\"#company\">Company</a>\r\n            </li>\r\n            <li class=\"nav-item\">\r\n              <a class=\"nav-link\" href=\"#products&solutions\"\r\n                >Products&Solutions</a\r\n              >\r\n            </li>\r\n            <li class=\"nav-item\">\r\n              <a class=\"nav-link\" href=\"#ourcustomers\">Customers</a>\r\n            </li>\r\n            <li class=\"nav-item\">\r\n              <a class=\"nav-link\" href=\"#contact\">Contact</a>\r\n            </li>\r\n          </ul>\r\n        </div>\r\n      </nav>\r\n    </section>\r\n  );\r\n}\r\n\r\nexport default Navbar;\r\n","import React from \"react\";\r\nimport \"./Jumbotron.css\";\r\nimport Particles from \"react-particles-js\";\r\n\r\nconst particleOpt = {\r\n  particles: {\r\n    number: {\r\n      value: 80,\r\n      density: {\r\n        enable: true,\r\n        value_area: 800\r\n      }\r\n    },\r\n    color: {\r\n      value: \"#ffffff\"\r\n    },\r\n    shape: {\r\n      type: \"circle\",\r\n      stroke: {\r\n        width: 0,\r\n        color: \"#000000\"\r\n      },\r\n      polygon: {\r\n        nb_sides: 5\r\n      },\r\n      image: {\r\n        src: \"img/github.svg\",\r\n        width: 100,\r\n        height: 100\r\n      }\r\n    },\r\n    opacity: {\r\n      value: 0.5,\r\n      random: false,\r\n      anim: {\r\n        enable: false,\r\n        speed: 1,\r\n        opacity_min: 0.1,\r\n        sync: false\r\n      }\r\n    },\r\n    size: {\r\n      value: 4,\r\n      random: true,\r\n      anim: {\r\n        enable: false,\r\n        speed: 40,\r\n        size_min: 0.1,\r\n        sync: false\r\n      }\r\n    },\r\n    line_linked: {\r\n      enable: true,\r\n      distance: 150,\r\n      color: \"#ffffff\",\r\n      opacity: 0.4,\r\n      width: 1\r\n    },\r\n    move: {\r\n      enable: true,\r\n      speed: 6,\r\n      direction: \"none\",\r\n      random: false,\r\n      straight: false,\r\n      out_mode: \"out\",\r\n      bounce: false,\r\n      attract: {\r\n        enable: false,\r\n        rotateX: 600,\r\n        rotateY: 1200\r\n      }\r\n    }\r\n  },\r\n  interactivity: {\r\n    detect_on: \"canvas\",\r\n    events: {\r\n      onhover: {\r\n        enable: true,\r\n        mode: \"repulse\"\r\n      },\r\n      onclick: {\r\n        enable: true,\r\n        mode: \"push\"\r\n      },\r\n      resize: true\r\n    },\r\n    modes: {\r\n      grab: {\r\n        distance: 400,\r\n        line_linked: {\r\n          opacity: 1\r\n        }\r\n      },\r\n      bubble: {\r\n        distance: 400,\r\n        size: 40,\r\n        duration: 2,\r\n        opacity: 8,\r\n        speed: 3\r\n      },\r\n      repulse: {\r\n        distance: 200,\r\n        duration: 0.4\r\n      },\r\n      push: {\r\n        particles_nb: 4\r\n      },\r\n      remove: {\r\n        particles_nb: 2\r\n      }\r\n    }\r\n  },\r\n  retina_detect: true\r\n};\r\n\r\nfunction Jumbotron() {\r\n  return (\r\n    <section id=\"home\">\r\n      <div class=\"landing\">\r\n        <div class=\"home-wrap\">\r\n          <div id=\"particles-js\">\r\n            <Particles params={particleOpt} height=\"100vh\" />\r\n          </div>\r\n          <div class=\"caption text-center\">\r\n            <span>Welcome to COMPUGEAR</span>\r\n            <h3>Perform your Computer</h3>\r\n            <a class=\"btn btn-outline-light btn-lg\" href=\"#\">\r\n              Who we are\r\n            </a>\r\n            <a class=\"btn btn-outline-light btn-lg\" href=\"#\">\r\n              products\r\n            </a>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </section>\r\n  );\r\n}\r\n\r\nexport default Jumbotron;\r\n","import React from \"react\";\nimport logo from \"./logo.svg\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"./App.css\";\nimport Navbar from \"./components/Navbar/Navbar\";\nimport Jumbotron from \"./components/Jumbotron/Jumbotron\";\n\nfunction App() {\n  return (\n    <div>\n      <Navbar />\n      <Jumbotron />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}